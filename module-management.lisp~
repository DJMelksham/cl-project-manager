(defun module-p (path &optional (module-config *module-config-name*))  
  (if (cl-fad:directory-pathname-p path) 
      (if (probe-file (merge-pathnames module-config path))
	  t
	  nil)))

(defun make-module-config (path)
  (let ((config nil))

    (setf config 
	  (designate-test-folder (merge-pathnames (cl-fad:pathname-as-directory *test-dir-name*) path) config))
    
    (setf config 
	  (designate-load-file (concatenate 'string "load-" (tail-of-path path) ".lisp") config))
    ;(designate-load-priority (auto-populate-priority path))

    (config-to-disk path config)))


(defun parent-modules (&optional (path *active-module-path*) (module-config *module-config-name*))
  
  (if (null path)
      (return-from parent-modules nil))

  (let ((result nil)
	(current-dir path)
	(parent-dir (cl-fad:pathname-parent-directory path)))
    
    (loop until (or (not (module-p parent-dir module-config))
		    (equal parent-dir current-dir))
       do (progn 
	    (push parent-dir result)
	    (setf current-dir parent-dir
		  parent-dir (cl-fad:pathname-parent-directory current-dir))))
    result))
 
(defun child-modules (&optional (path *active-module-path*))
  (loop for dir in (get-path-folders-without-git path)
       if (module-p dir)
       collect dir))

(defun validate-module ()
  (let ((result t))
    
    (if (not (validate-config-structure *active-module-config*))
	(setf result nil))
    
    (setf *active-module-validated* result))



;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(defun make-module (path &optional (active-module-once-made t))
  (let ((creation-status (if (probe-file path)
			     (make-module-if-exists path)
			     (make-module-if-not-exists path))))

  (if (and active-module-once-made
	   creation-status
	   (module-p path))
      (active-module path))))

(defun make-module-if-exists (path)
  nil
)

(defun make-module-if-not-exists (path)
  nil
)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(defun active-module (&optional (module-identifier nil))

  (cond ((null module-identifier) 
	 *active-module-path*)
	((and (not (stringp module-identifier))
	      (not (symbolp module-identifier))
	      (not (pathnamep module-identifier)))
	 (return-from active-module *active-module-path*))
	((and (not (symbolp module-identifier))
	      (cl-fad:directory-exists-p module-identifier)
	      (module-p module-identifier))
	 (setf *active-module-path* (cl-fad:pathname-as-directory module-identifier)))
	((and (path-from-name module-identifier) 
	      (cl-fad:directory-pathname-p (path-from-name module-identifier))
	      (module-p (path-from-name module-identifier)))
	 (setf *active-module-path* (path-from-name module-identifier)))
	(t (progn (print "Unable to establish new active module.")
		  (return-from active-module nil))))
  
  (setf *active-module-config* (config-from-disk *active-module-path*))
  
  (validate-module *active-module-path*)

*active-module-path*)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(defun up-module ()
  (let ((parent-module (car (parent-modules))))
    (cond ((null *active-module-path*)
	   (progn
	     (print "No active module currently defined. No parent module available.")
	     (return-from up-module *active-module-path*)))
	  ((null parent-module)
	   (progn
	     (format t "~a is a top-level module." (tail-of-path *active-module-path*))
	     (return-from up-module *active-module-path*)))
	  (t (active-module parent-module)))))

(defun down-module (&optional (module-identifier nil))
  (cond ((null *active-module-path*)
	 (progn
	   (print "No active module currently defined. No sub-modules available.")
	   (return-from down-module *active-module-path*)))
	((null module-identifier)
	 (progn
	   (print "Please provide a module identifier. No sub-modules available. ")
	   (return-from down-module *active-module-path*)))
	((or (null (path-from-name module-identifier))
	     (not (module-p (path-from-name module-identifier))))
	 (progn
	   (format t "Identifier does not match any module in ~a" (tail-of-path *active-module-path*))
	   (return-from down-module *active-module-path*)))
	(t (active-module (path-from-name module-identifier)))))


(defmacro generate-nwtests
    '("EQ" "=" "EQL" "EQUAL" "EQUALP" 
      "NULL" "T" "CONDITION-OF-TYPE" "ERROR" 
      "NOT-EQ" "/=" "NOT=" "NOT-EQL" 
      "NOT-EQUAL" "NOT-EQUALP" "NOTNULL" "NOT-T" 
      "NOT-CONDITION-OF-TYPE" "NOT-ERROR"))

(defmacro generate-tests
    '("EQ" "=" "EQL" "EQUAL" "EQUALP" 
      "NULL" "T" "CONDITION-OF-TYPE" "ERROR" 
      "NOT-EQ" "/=" "NOT=" "NOT-EQL" 
      "NOT-EQUAL" "NOT-EQUALP" "NOTNULL" "NOT-T" 
      "NOT-CONDITION-OF-TYPE" "NOT-ERROR")

)

(defmacro qtest (&key 
		   name
		   description
		   (source +)
		   (expected-value *)
		    before-function-source
		    after-function-source)
  `(make-test :name ,name
	      :description ,description
	      :expectation "EQUALP"
	      :source ',source
	      :expected-value ,expected-value
	      :before-function-source ',before-function-source
	      :after-function-source ',after-function-source))
		      
(defmacro qtest-eq (&rest body &key (expectation "EQ")) (with-gensyms (qtest) `(,qtest ,@body)))

(defmacro nwtest (&key 
		   name
		   description
		   (expectation "EQUALP")
		   (source +)
		   (expected-value *)
		    before-function-source
		    after-function-source)
  `(make-test :name ,name
	      :description ,description
	      :expectation ,expectation
	      :source ,source
	      :expected-value ,expected-value
	      :before-function-source ',before-function-source
	      :after-function-source ',after-function-source))


(defmacro test (&key 
		   name
		   description
		   (expectation "EQUALP")
		   (source +)
		   (expected-value *)
		    before-function-source
		    after-function-source)

)

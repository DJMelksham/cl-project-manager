(in-package #:peasant)

(defvar *active-project* nil)
(defvar *active-project-path* nil)
(defvar *test-folder-name* "tests/")
(defvar *test-path* nil)

(defun active-project (system-keyword &key test-path)
    ;;set active project
    ;;also make sure active-ness is set in gittest and possibly testy?
  (if (and (symbolp *active-project*)
	   (pathnamep *active-project*)
	   (pathnamep *test-path*)
	   (not (= (testy:stat-number-tests (testy:all-tests)) 0))
	   (y-or-n-p (concatenate
		      'string
		      "Sir, you already have an active project "
		      *active-project*
		      "with tests defined.  Serialise current tests before changing projects?")))
      (testy:serialise-tests *test-path*))

      (testy:deregister-tests (testy:all-tests))

      (setf *active-project* system-keyword)
      (setf *active-project-path* (asdf:system-source-directory system-keyword))

      (print test-path)
      (if (null test-path)
	  (setf *test-path*
		(uiop:merge-pathnames*
		 (uiop:ensure-directory-pathname *test-folder-name*)
		 (asdf:system-source-directory system-keyword))))
      (asdf/cl:ensure-directories-exist *test-path*)

      (gittest:set-gittest-active-directory *active-project-path*)

      (testy:load-tests *test-path*)

      (format t "~&ACTIVE PROJECT: ~a~&PROJECT PATH: ~a~&TESTS PATH: ~a~&~a TESTS LOADED"
	      *active-project*
	      *active-project-path*
	      *test-path*
	      (testy:stat-number-tests (testy:all-tests))))
      
(defun git-branch ()
  (let ((result (gittest:git "rev-parse --abbrev-ref HEAD")))
    (string-trim 
      '(#\Space #\Newline #\Backspace #\Tab 
        #\Linefeed #\Page #\Return #\Rubout)
      result)))

(defun git-add ()
  (gittest:git "add -A"))

(defun git-commit (message)
  (gittest:git (concatenate 'string "commit -m " "'" message "'")))

(defun git-push (&key (remote "origin") (branch (git-branch)))
  (gittest:git (concatenate 'string "push " remote " " branch)))

(defun git-init ()
  (gittest:git "init"))

(defun git-add-commit-push (&key
			      (message "Automatic peasant commit message!")
			      (remote "origin")
			      (branch (git-branch)))
  (git-add)
  (git-commit message)
  (git-push :remote remote :branch branch))

;;just use quick project make-project :P

;  (quickproject (uiop:ensure-reictory-pathname pathname)
;		:depends-on depends-on
;		:template-parameters template-parameters
;		:template-directory template-directory
;		:author author
;		:licence licence
;		:include-copyright include-copyright)
;
;		(let ((gittest:*project-path* (uiop:ensure-directory-pathname pathname)))
;		  
;					;add on to actions in quick-project
;   )

(defun make-git ()
    ;;init-git
    (git-init)
    (git-commit :message "Initial commit automatically generated by the lowly peasant program"))

(defun save-project (&key 
		       (write-tests t)
		       (message "Automatic peasant commit!")
		       (remote "origin")
		       (branch (git-branch)))
    
  ;; write tests
  (if write-tests
      (testy:serialise-tests *active-project-path*))

    ;; git add commit push
  (git-add-commit-push message :remote remote :branch branch))

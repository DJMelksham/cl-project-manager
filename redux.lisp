(defvar *active-project* nil)
(defvar *active-project-path* nil)
(defvar *test-folder-name* "tests/")
(defvar *test-path* nil)

(defun prompt-read (prompt)
  (format *query-io* "~a: " prompt)
  (read-line *query-io*))

(defun active-project (system-keyword)
    ;;set active project
    ;;also make sure active-ness is set in gittest and possibly testy?
  (if (and (symbolp *active-project*)
	   (pathnamep *active-project*)
	   (pathnamep *test-path*)
	   (= (not (stat-number-tests (all-tests))) 0)
	   (y-or-n-p (concatenate
		      'string
		      "Sir, you already have an active project "
		      *active-project*
		      "with tests defined.  Serialise current tests before changing projects?")))
      (testy:serialise-tests *test-path*))

      (testy:deregister-tests (all-tests))

      (setf *active-project* system-keyword)
      (setf *active-project-path* (asdf:system-source-directory system-keyword))
      (setf *test-path*
	    (uiop/pathname:merge-pathnames*
	     (asdf-utils:ensure-directory-pathname *test-folder-path*)
	     (asdf:system-source-directory :gittest)))

      (asdf/cl:ensure-directories-exist *test-path*)

      (testy:load-tests *test-path*)

      (format t "~&ACTIVE PROJECT: ~a~&PROJECT PATH: ~a~&~a TESTS LOADED."
	      *active-project*
	      *active-project-path*
	      (testy:stat-number-tests (all-tests))))
      
;; Can the below be refactored to just use the gittest library?
(defun git-folder-p (path-to-be-searched)
 (let* ((true-path (truename (cl-fad:pathname-as-directory path-to-be-searched)))
	 (true-name-string (namestring true-path)))
   (if (and (cl-fad:directory-exists-p true-path)
	    (search "/.git/" true-name-string))
      T
      NIL)))

(defun add-commit-push (&optional
			  (message "Automatic peasant commit message!")
			  (remote "origin")
			  (branch "dev"))
  (git-add)
  (git-commit "message")
  (git-push remote branch))

(defun git-add ()
  (gittest:git "add -A"))

(defun git-commit (message)
  (gittest:git (concatenate 'string "commit -m " message)))

(defun git-push (remote branch)
  (gittest:git (concatenate 'string "push " remote " " branch)))

(defun git-init ()
  (gittest:git "init"))

(defun make-project
    ;add on to actions in quick-project
    )

(defun make-git ()
    ;;init-git
    (git-init)
    (git-commit "Initial commit automatically generated by the lowly peasant"))


(defun save-project (&key 
		       (write-tests t)
		       (message "Automatic peasant commit message!")
		       (remote "origin")
		       (branch "dev"))
    
  ;; write tests
  (if write-tests
      (testy:serialise-tests *active-project-path*))

    ;; git add commit push
  (git-add-commit-push message remote branch))

(defun stat-number-tests (test-identifiers)
  (length (fetch-tests test-identifiers))
)

(defun stat-number-passed (test-identifiers)
  (let ((passed 0)
	(failed 0))
    (loop for test across (fetch-tests test-identifiers)
	 do (if (result test) 
		(incf passed)
		(incf failed)))
    (values passed failed)))

(defun stat-number-failed (test-identifiers)
  (let ((passed 0)
	(failed 0))
    (loop for test across (fetch-tests test-identifiers)
	 do (if (result test) 
		(incf passed)
		(incf failed)))
    (values failed passed)))


(defun stat-perc-passed (test-identifiers)
  (multiple-value-bind (num-passed num-failed)
    (stat-number-passed test-identifiers)
    (cond ((and (zerop num-passed)
		(zerop num-failed))
	   (error "Somehow, no tests fed into the function via test-identifiers passed or failed."))
	  ((zerop num-passed)
	   (values 0.00 100.00))
	  ((zerop num-failed)
	   (values 100.00 0.00))
	  (t (values (float (* 100 (/ num-passed (+ num-passed num-failed))))
		     (float (* 100 (- 1 (/ num-failed (+ num-passed num-failed))))))))))

(defun stat-ratio-passed (test-identifiers)
  (multiple-value-bind (num-passed num-failed)
      (stat-number-passed test-identifiers)
    (cond ((and (zerop num-passed)
		(zerop num-failed))
	   (error "Somehow, no tests fed into the function via test-identifiers passed or failed."))
	  ((zerop num-passed)
	   (values 0 num-failed))
	  ((zerop num-failed)
	   (values num-passed 0))
	  (t (values (/ num-passed (+ num-passed num-failed))
		     (/ num-failed (+ num-passed num-failed)))))))

(defun stat-perc-failed (test-identifiers)
  (multiple-value-bind (num-passed num-failed)
    (stat-number-passed test-identifiers)
    (cond ((and (zerop num-passed)
		(zerop num-failed))
	   (error "Somehow, no tests fed into the function via test-identifiers passed or failed."))
	  ((zerop num-passed)
	   (values 0.00 100.00))
	  ((zerop num-failed)
	   (values 100.00 0.00))
	  (t (values (float (* 100 (- 1 (/ num-failed (+ num-passed num-failed)))))
		     (float (* 100 (/ num-passed (+ num-passed num-failed)))))))))

(defun stat-ratio-failed (test-identifiers)
  (multiple-value-bind (num-passed num-failed)
      (stat-number-passed test-identifiers)
    (cond ((and (zerop num-passed)
		(zerop num-failed))
	   (error "Somehow, no tests fed into the function via test-identifiers passed or failed."))
	  ((zerop num-passed)
	   (values 0 num-failed))
	  ((zerop num-failed)
	   (values num-passed 0))
	  (t (values (/ num-failed (+ num-passed num-failed)
			(/ num-passed (+ num-passed num-failed))))))))

(defun stat-total-run-time (test-identifiers)
  "Approximate total run time of a selection of tests in seconds"
 (reduce #'+ (map-tests (lambda (x) (run-time x)) (fetch-tests test-identifiers))))

(defun stat-number-conditions (test-identifiers)
  (let ((conditions 0)
	(non-conditions 0))
    (loop for test across (fetch-tests test-identifiers)
	 do (if (typep (run-value test) 'condition) 
		(incf conditions)
		(incf non-conditions)))
    (values conditions non-conditions)))


(defun stat-number-errors (test-identifiers)
  (let ((conditions 0)
	(non-conditions 0))
    (loop for test across (fetch-tests test-identifiers)
	 do (if (typep (run-value test) 'error) 
		(incf conditions)
		(incf non-conditions)))
    (values conditions non-conditions)))

(defun stats (test-identifiers)
test-identifiers
)
